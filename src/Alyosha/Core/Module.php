<?php
/**
 * Created by PhpStorm.
 * User: cyrille
 * Date: 20/05/15
 * Time: 23:47
 */

namespace Alyosha\Core;

class Module implements  ModuleInterface
{
    protected $config;

    public function __construct()
    {
        $this->config = Config::generate();
    }

    public function getParameter($category, $name)
    {
        if (!$category || !$name || !in_array($category, $this->config) || !in_array($name, $this->config[$category])){
            return '';
        }
        
        return $this->config[$category][$name];
    }

    /**
     * @return array
     * Return the names of the events the module is listening to
     */
    public function getTriggers()
    {
        return [];
    }

    /**
     * Execute warm-up of the module, like connections to database or similar
     */
    public function fire()
    {}

    /**
     * @return array
     * Return events generated by the module.
     */
    public function getEvents()
    {
        return [];
    }

    /**
     * @param Event $event
     * Notify the module of an event. This might create another event which will
     * be collected by the method getEvents.
     */
    public function notify(Event $event)
    {}

    /**
     * @return string
     * Return module name, mostly for debug
     */
    public function getName()
    {
        return '_';
    }
}
